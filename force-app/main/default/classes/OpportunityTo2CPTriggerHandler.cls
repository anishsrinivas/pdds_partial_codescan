/*
    Name             : OpportunityTo2CPTriggerHandler
    Author Name      : Vigneshwaran Durairaj
    Created on       : 
    Last Modified    : Dec 02 2020
    Last Modified By : Vigneshwaran Durairaj
    Description      : The purpose of this to sync payment information to 2CP Platform and storing the Success Message in Opportunity Object.
*/
public without sharing class OpportunityTo2CPTriggerHandler {

	//Boolean used to restrict recursion.
	Public Static boolean showRun = true;

	//Map used to store the response message with key of random number.
	public static Map<String, TProResponseWrapper> responseMap = new Map<String, TProResponseWrapper> ();

	//Map used to store opportunity Id with key of random number.
	public static Map<String, Id> opportunityAndRandomNumberMap = new Map<String, Id> ();

	//Boolean used to store authentication failure.
	public static boolean authenticationError = false;
    
    //Map used to update response customer Id to Account
    public static Map<Id,Account> accountMap = new Map<Id,Account>();

	//String used to store authentication error message.
	public static string authenticationErrorMessage;

	private string getAccountEmptyIfNull(string accountName)
	{
		return accountName != null ? '        <companyname>' + accountName + '</companyname>' : '';
	}
	
	private string getCardHolderFirstNameEmptyIfNull(string holderName)
	{
		return holderName != null ? '        <firstname>' + holderName + '</firstname>' : '';
	}
	
	private string getCardHolderLastNameEmptyIfNull(string holderName)
	{
		return holderName != null ? '        <lastname>' + holderName + '</lastname>' : '';
	}
	
	private string getBillingStreetEmptyIfNull(string billingStreet)
	{
		return billingStreet != null ? '        <address1>' + billingStreet + '</address1>' : '';
	}
	
	private string getBillingCityEmptyIfNull(string billingCity)
	{
		return billingCity != null ? '        <city>' + billingCity + '</city>' : '';
	}
	
	private string getBillingStateEmptyIfNull(string billingState)
	{
		return billingState != null ? '        <state>' + billingState + '</state>' : '';
	}
	
	private string getPostalEmptyIfNull(string postalCode)
	{
		return postalCode != null ? '        <zipcode>' + postalCode + '</zipcode>' : '';
	}
	
	private string getEmailEmptyIfNull(string email)
	{
		return email != null ? '        <email1>' + email + '</email1>' : '';
	}
	
	private string getCardHolderXML(Opportunity opportunityRecord)
	{
		string returnCardHolderXml = '';
		returnCardHolderXml += getAccountEmptyIfNull(opportunityRecord.Account.Name);
		returnCardHolderXml += getCardHolderFirstNameEmptyIfNull(opportunityRecord.Card_Holder_Name__c);
		returnCardHolderXml += getCardHolderLastNameEmptyIfNull(opportunityRecord.Card_Holder_Name__c);
		returnCardHolderXml += getBillingStreetEmptyIfNull(opportunityRecord.Account.BillingStreet);
		returnCardHolderXml += getBillingCityEmptyIfNull(opportunityRecord.Account.BillingCity);
		returnCardHolderXml += getBillingStateEmptyIfNull(opportunityRecord.Account.BillingState);
		returnCardHolderXml += getPostalEmptyIfNull(opportunityRecord.Account.BillingPostalCode);
		returnCardHolderXml += opportunityRecord.Account.BillingPostalCode != null ? '        <country>United States</country>' : '';
		returnCardHolderXml += getEmailEmptyIfNull(opportunityRecord.Account.ia_crm__Email_ID__c);
		return returnCardHolderXml;
	}
	
	private string getContactRequestXML(Opportunity opportunityRecord, Integer autogeneratedNumber)
	{
		string returnContactRequestXml = '';
		returnContactRequestXml += '  <if condition="{!customer_' + autogeneratedNumber + '.responsestatus!} = \'success\'">';
		returnContactRequestXml += '    <update>';
		returnContactRequestXml += '      <contact refname="contact_' + autogeneratedNumber + '">';
		returnContactRequestXml += '        <name>B_{!customer_' + autogeneratedNumber + '.name!}</name>';
		returnContactRequestXml += '        <customer>{!customer_' + autogeneratedNumber + '.id!}</customer>';
		returnContactRequestXml += '        <contacttype>billing</contacttype>';
		
		returnContactRequestXml += getCardHolderXML(opportunityRecord);
		
		returnContactRequestXml += '      </contact>';
		returnContactRequestXml += '    </update>';
		returnContactRequestXml += '  </if>';
		returnContactRequestXml += '  <if condition="{!contact_' + autogeneratedNumber + '.responsestatus!} != \'success\'">';
		returnContactRequestXml += '    <create>';
		returnContactRequestXml += '      <contact refname="contact_' + autogeneratedNumber + '">';
		returnContactRequestXml += '        <name>B_{!customer_' + autogeneratedNumber + '.name!}</name>';
		returnContactRequestXml += '        <customer>{!customer_' + autogeneratedNumber + '.id!}</customer>';
		returnContactRequestXml += '        <contacttype>billing</contacttype>';
					
		returnContactRequestXml += getCardHolderXML(opportunityRecord);
		
		returnContactRequestXml += '      </contact>';
		returnContactRequestXml += '    </create>';
		returnContactRequestXml += '  </if>';
		
		
		return returnContactRequestXml;
	}
	
	private string getCustomerRequestXML(Opportunity opportunityRecord, Integer autogeneratedNumber)
	{
		string returnCustomerRequestXml = '';
		
		returnCustomerRequestXml += '  <update>';
		returnCustomerRequestXml += '    <customer refname="customer_' + autogeneratedNumber + '">';
		returnCustomerRequestXml += '      <name>' + opportunityRecord.Account.GUP_ID__c + '-' + opportunityRecord.Account.Global_Id__c + '</name>';
		returnCustomerRequestXml += '      <displayname>' + opportunityRecord.Account.Name + '</displayname>';
		returnCustomerRequestXml += '    </customer>';
		returnCustomerRequestXml += '  </update>';
		returnCustomerRequestXml += '  <if condition="{!customer_' + autogeneratedNumber + '.responsestatus!} != \'success\'">';
		returnCustomerRequestXml += '    <create>';
		returnCustomerRequestXml += '      <customer refname="customer_' + autogeneratedNumber + '">';
		returnCustomerRequestXml += '        <name>' +opportunityRecord.Account.GUP_ID__c + '-' + opportunityRecord.Account.Global_Id__c + '</name>';
		returnCustomerRequestXml += '        <displayname>' + opportunityRecord.Account.Name + '</displayname>';
		returnCustomerRequestXml += '      </customer>';
		returnCustomerRequestXml += '    </create>';
		returnCustomerRequestXml += '  </if>';
		
		return returnCustomerRequestXml;
	}
	
	private string getCreditCardRequestXML(Opportunity opportunityRecord, Integer autogeneratedNumber)
	{
		string returnCreditCardRequestXml = '';
	
		if (opportunityRecord.Payment_Type__c == 'Credit Card' && opportunityRecord.Credit_Card_Number__c != null && opportunityRecord.Card_Holder_Name__c != null && opportunityRecord.CC_Expiration_Month_Year__c.contains('/') && opportunityRecord.CC_Expiration_Month_Year__c != null) {
			returnCreditCardRequestXml += '  <if condition="{!contact_' + autogeneratedNumber + '.responsestatus!} = \'success\'">';
			returnCreditCardRequestXml += '    <create>';
			returnCreditCardRequestXml += '      <storedaccount refname="storedaccount_' + autogeneratedNumber + '">';
			returnCreditCardRequestXml += '        <name>' + opportunityRecord.Name + '_CC ' + system.now() + '</name>';
			returnCreditCardRequestXml += '        <displayname>' + opportunityRecord.Name + '_CC</displayname>';
			returnCreditCardRequestXml += '        <customer>{!customer_' + autogeneratedNumber + '.id!}</customer>';
			returnCreditCardRequestXml += '        <contact>{!contact_' + autogeneratedNumber + '.id!}</contact>';
			returnCreditCardRequestXml += '        <isdefault>true</isdefault>';
			returnCreditCardRequestXml += '        <creditcard>';
			returnCreditCardRequestXml += '          <keyed>';
			returnCreditCardRequestXml += '            <cardholdernumber>' + opportunityRecord.Credit_Card_Number__c + '</cardholdernumber>';
			returnCreditCardRequestXml += '            <cardholdername>' + opportunityRecord.Card_Holder_Name__c + '</cardholdername>';
			returnCreditCardRequestXml += '            <expiresmonth>' + opportunityRecord.CC_Expiration_Month_Year__c.subStringBefore('/') + '</expiresmonth>';
			returnCreditCardRequestXml += '            <expiresyear>' + opportunityRecord.CC_Expiration_Month_Year__c.subStringAfter('/') + '</expiresyear>';
			returnCreditCardRequestXml += '          </keyed>';
			returnCreditCardRequestXml += '        </creditcard>';
			returnCreditCardRequestXml += '      </storedaccount>';
			returnCreditCardRequestXml += '    </create>';
			returnCreditCardRequestXml += '  </if>';
		}
        
        
		return returnCreditCardRequestXml;
	}
	
	private string getTProAccountRequestXML(Opportunity opportunityRecord, Integer autogeneratedNumber)
	{
		string TProAccountRequestXML = '';
        system.debug(opportunityRecord.Payment_Type__c);
        system.debug(opportunityRecord.TPro_Account_Name__c);
        system.debug(opportunityRecord.ACH_Number__c);
        system.debug(opportunityRecord.Routing_Number__c);
        
		if (opportunityRecord.Payment_Type__c == 'Account' && opportunityRecord.TPro_Account_Name__c != null && opportunityRecord.ACH_Number__c != null && opportunityRecord.Routing_Number__c != null) {
			TProAccountRequestXML += '  <if condition="{!contact_' + autogeneratedNumber + '.responsestatus!} = \'success\'">';
			TProAccountRequestXML += '    <create>';
			TProAccountRequestXML += '      <storedaccount refname="storedaccount_' + autogeneratedNumber + '">';
			TProAccountRequestXML += '        <name>' + opportunityRecord.Name + '_ACH ' + system.now() + '</name>';
			TProAccountRequestXML += '        <displayname>' + opportunityRecord.Name + '_ACH</displayname>';
			TProAccountRequestXML += '        <customer>{!customer_' + autogeneratedNumber + '.id!}</customer>';
			TProAccountRequestXML += '        <contact>{!contact_' + autogeneratedNumber + '.id!}</contact>';
			TProAccountRequestXML += '        <isdefault>true</isdefault>';
			TProAccountRequestXML += '        <ach>';
			TProAccountRequestXML += '          <AccountHolder>' + opportunityRecord.TPro_Account_Name__c + '</AccountHolder>';
			TProAccountRequestXML += '          <AccountNumber>' + opportunityRecord.ACH_Number__c + '</AccountNumber>';
			TProAccountRequestXML += '          <PaymentType>Single</PaymentType>';
			TProAccountRequestXML += '          <RoutingNumber>' + opportunityRecord.Routing_Number__c + '</RoutingNumber>';
			TProAccountRequestXML += '          <SecCode>CCD</SecCode>';
			TProAccountRequestXML += '        </ach>';
			TProAccountRequestXML += '      </storedaccount>';
			TProAccountRequestXML += '    </create>';
			TProAccountRequestXML += '  </if>';
		}
        
        return TProAccountRequestXML;
	}
	
	private string getRequestXML(Map<Id, Opportunity> opportunityMap)
	{
		string returnRequestXml = '';
		for (Opportunity opportunityRecord: opportunityMap.values()) {
			Integer autogeneratedNumber = Integer.valueOf(Math.random() * 1000000000);
			returnRequestXml += getCustomerRequestXML(opportunityRecord, autogeneratedNumber);
			returnRequestXml += getContactRequestXML(opportunityRecord, autogeneratedNumber);
			returnRequestXml += getCreditCardRequestXML(opportunityRecord, autogeneratedNumber);
			returnRequestXml += getTProAccountRequestXML(opportunityRecord, autogeneratedNumber);
			
			//below mentioned map used to store random number and opportunity Id.
			opportunityAndRandomNumberMap.put(String.valueOf(autogeneratedNumber), opportunityRecord.Id);

			//below mentioned map used to store random number and wrapper class object to store response message.
			responseMap.put(String.valueOf(autogeneratedNumber), new TProResponseWrapper());
		}
		return returnRequestXml;
	}

	//Method called from OpportunityTo2CPTrigger for make callout to sync payment details in 2CP.
	@future(callout = true)
	public static void syncTo2CPTPro(List<Id> opportunityIds) {

		try {
	
			//Map used to store the queried incoming opportunity records.
			Map<Id, Opportunity> opportunityMap = new Map<Id, Opportunity> ([SELECT Id, AccountId, Account.X2CP_Customer_Id__c, Account.Synced_with_2CP__c, 
                                                                             Card_Holder_Name__c, Name,Credit_Card_Number__c,TPro_StoredAccountID__c,
                                                                                CC_Expiration_Month_Year__c, Account.BillingStreet,Account.GUP_ID__c,
                                                                                Account.BillingCity, Account.BillingState, Account.BillingPostalCode,
                                                                                Account.BillingCountry, Account.ia_crm__IntacctID__c, Account.Name,
                                                                                Card_Holder_City__c, Account.ia_crm__Email_ID__c, TPro_Account_Name__c,
                                                                                Routing_Number__c, ACH_Number__c, TPro_Success__c,Payment_Type__c,Account.Global_Id__c
                                                                                FROM Opportunity WHERE Id =: opportunityIds
                                                                            ]);

			//Check whether opportunityMap empty before processing.
			if (!opportunityMap.isEmpty()) {

				//Initializing the http request.
				HttpRequest authRequest = new HttpRequest();

				//set http header.
				authRequest.setHeader('Content-Type', 'text/xml');

				//set http endpoint using named credentials for secure.
				authRequest.setEndpoint('callout:TPro_Credentials/xml');

				//set http method.
				authRequest.setMethod('POST');

				//xml declared below used to set http body.
				string xml = '';

				xml += '<request>';
				xml += '<authentication>';
				xml += '  <user>';
				xml += '    <gateway>'+system.label.X2CP_Gateway+'</gateway>';
				xml += '    <emailaddress>' + '{!$Credential.Username}' + '</emailaddress>';
				xml += '    <password>' + '{!$Credential.Password}' + '</password>';
				xml += '    <application>Salesforce</application>';
				xml += '    <version>1.0.0</version>';
				xml += '  </user>';
				xml += '</authentication>';
				xml += '<content continueonfailure="true">';
				
                OpportunityTo2CPTriggerHandler OpportunityTo2CPTriggerMethod = new OpportunityTo2CPTriggerHandler();
				xml += OpportunityTo2CPTriggerMethod.getRequestXML(opportunityMap);
				
				xml += '</content>';
				xml += '</request>';
				
                system.debug(xml);
				//set http body.
				authRequest.setBody(xml);

				//Initializing http method to send request.
				Http http = new Http();

				//Initializing http response.
				HttpResponse res = http.send(authRequest);


				//Initializing DOM.Document object for parsing response XML.
				DOM.Document authResponse = new DOM.Document();

				//Load response body into DOM.Document.
				authResponse.load(res.getBody());

				//Processing the inner child elements.
				for (DOM.XmlNode node: authResponse.getRootElement().getChildElements()) {

					if (node.getName() == 'authentication') {

						//Check Authentication Success Or Failure.
						if (node.getAttributeValue('responsestatus', '') == 'failure') {

							//Set Authentication Error flag to true and Set Authentcation Error Message.
							authenticationError = true;

							//returnErrorMessage method used to process Error.
							authenticationErrorMessage = returnErrorMessage(node);

						}
					} else if (node.getName() == 'content') {

						//Process content node inner childs
						for (DOM.XmlNode contentNode: node.getChildElements()) {

							//This method used to process the inner childs of content node.
							processResponse(contentNode);

						}
					}

				}

				//This method used to update response in opportunity records.
				update2CPResponse(opportunityMap);

			}
		} catch (Exception error) {

			//Debugging the error message.
			system.debug(error.getMessage());
            system.debug(error.getCause());

		}
	}

	//This method used to process the content node inner childs.
	public static void processResponse(DOM.XmlNode createOrUpdateNode) {

		for (DOM.XmlNode contentNode: createOrUpdateNode.getChildElements()) {

			//Get value refName and remove the extra added characters.
			String referenceIdentifier = removeCharactersFromRefId(contentNode.getAttributeValue('refname', ''));

			//If response is success process success nodes and store success message
			if (contentNode.getAttributeValue('responsestatus', '').equals('success')) {

				//Check responseMap contains key.
				if (responseMap.containsKey(referenceIdentifier)) {

					//Assign TProResponseWrapper object from responseMap with help of refernceIdentifier as key.
					TProResponseWrapper responseMessages = responseMap.get(referenceIdentifier);

					//Assign message if it is customer node.
					Switch on contentNode.getName(){
						when 'customer' {
							responseMessages.customerResponseMessage = 'Customer Synced Successfully; ';
							responseMessages.customerId = returnIdfromResponse(contentNode);
						}	
						when 'contact' {
							responseMessages.contactResponseMessage = 'Contact Synced Successfully; ';
							responseMessages.contactId = returnIdfromResponse(contentNode);
						}
						when else {
							responseMessages.storedAccountResponseMessage = 'Stored Account Synced Successfully; ';
						responseMessages.storedAccountId = returnIdfromResponse(contentNode);
						}
					}

					//Put random number and response message in the responseMap.
					responseMap.put(referenceIdentifier, responseMessages);
				}
			} else {

				//Check responseMap contains key.
				if (responseMap.containsKey(referenceIdentifier) || test.isRunningTest()) {

					//Assign TProResponseWrapper object from responseMap with help of refernceIdentifier as key.
					TProResponseWrapper responseMessages = responseMap.get(referenceIdentifier);

					//Assign message if it is customer node.
					Switch on contentNode.getName(){
						when 'customer' {
							responseMessages.customerResponseMessage = 'Customer Error --> ' + returnErrorMessage(contentNode) + '; ';
						}	
						when 'contact' {
							responseMessages.contactResponseMessage = 'Contact Error --> ' + returnErrorMessage(contentNode) + '; ';
						}
						when else {
							responseMessages.storedAccountResponseMessage = 'Stored Account Error --> ' + returnErrorMessage(contentNode) + '; ';
						}
					}
					//Put random number and response message in the responseMap.
					responseMap.put(referenceIdentifier, responseMessages);
				}

			}
		}
	}

	//This method used to remove the extra added character from the reference Name got from the response.
	public static string removeCharactersFromRefId(String referenceIdentifier) {

		//Remove extra added customer_ in the refName.
		if (referenceIdentifier.contains('customer_')) {
			referenceIdentifier = referenceIdentifier.remove('customer_');
		}

		//Remove extra added contact_ in the refName.
		else if (referenceIdentifier.contains('contact_')) {
			referenceIdentifier = referenceIdentifier.remove('contact_');
		}

		//Remove extra added storedaccount_ in the refName.
		else {
			referenceIdentifier = referenceIdentifier.remove('storedaccount_');
		}

		return referenceIdentifier;
	}

	//This method used to process the error message.
	public static string returnErrorMessage(DOM.XmlNode errorResponseNode) {

		//String used to store error message and return.
		String errorMessage;

		//Process error child nodes.
		for (DOM.XmlNode processErrorNode: errorResponseNode.getChildElements()) {
			if (processErrorNode.getName() == 'errors') {
				for (DOM.XmlNode errorsNode: processErrorNode.getChildElements()) {
					if (errorsNode.getName() == 'error') {
						for (DOM.XmlNode errorNode: errorsNode.getChildElements()) {
							errorMessage = errorMessage == null ? errorNode.getText() : errorMessage + ' ' + errorNode.getText();
						}

					}
				}
			}
		}

		return errorMessage;
	}

	//This Method used to update responses back in opportunity records.
	public static void update2CPResponse(Map<Id, Opportunity> opportunityMap) {
        
        List<Account> accountList = new List<account>();
		if (!responseMap.isEmpty()) {
			for (String randomNumber: responseMap.keySet()) {
				//Get the opportunityId for the corresponding randomNumber.
				Id getOpportunityId = opportunityAndRandomNumberMap.get(randomNumber);

				//If it is authentication error.
				if (authenticationError) {
					//Assign authentication error message.
					opportunityMap.get(getOpportunityId).TPro_Success__c = authenticationErrorMessage;
				}

				//If it is not authentication error.
				else {

					//Check customerResponseMessage is null.
					if (responseMap.get(randomNumber).customerResponseMessage != null) {
						opportunityMap.get(getOpportunityId).TPro_Success__c = responseMap.get(randomNumber).customerResponseMessage;
                        
                        if(!opportunityMap.get(getOpportunityId).account.Synced_with_2CP__c)
                        {
                            if(!accountMap.containsKey(opportunityMap.get(getOpportunityId).accountId))
                            {
                                Account accountObject = new Account();
                                accountObject.Id = opportunityMap.get(getOpportunityId).accountId;
                                accountObject.Synced_with_2CP__c = true;
                                accountObject.X2CP_Customer_Id__c = responseMap.get(randomNumber).customerId;
                                
                                if(opportunityMap.get(getOpportunityId).account.ia_crm__IntacctID__c == null || opportunityMap.get(getOpportunityId).account.ia_crm__IntacctID__c == '')
                                {
                                    accountObject.ia_crm__IntacctID__c = opportunityMap.get(getOpportunityId).account.GUP_ID__c +'-'+ opportunityMap.get(getOpportunityId).account.Global_Id__c;
                                    
                                }
                                
                                accountMap.put(opportunityMap.get(getOpportunityId).accountId,accountObject);
                                
                            }
                        }
					}

					//Check contactResponseMessage is null.
					if (responseMap.get(randomNumber).contactResponseMessage != null) {
						opportunityMap.get(getOpportunityId).TPro_Success__c += responseMap.get(randomNumber).contactResponseMessage;
					}

					//Check storedAccountResponseMessage is null.
					if (responseMap.get(randomNumber).storedAccountResponseMessage != null) {
						opportunityMap.get(getOpportunityId).TPro_Success__c += responseMap.get(randomNumber).storedAccountResponseMessage;
                        opportunityMap.get(getOpportunityId).TPro_StoredAccountID__c = (!String.isBlank(opportunityMap.get(getOpportunityId).TPro_StoredAccountID__c) || !String.isEmpty(opportunityMap.get(getOpportunityId).TPro_StoredAccountID__c)) ?  opportunityMap.get(getOpportunityId).TPro_StoredAccountID__c + ',' + responseMap.get(randomNumber).storedAccountId : responseMap.get(randomNumber).storedAccountId;

					}
				}

			/*	//Blanking out all the payment related fields.
				opportunityMap.get(getOpportunityId).Payment_Type__c = null;
				opportunityMap.get(getOpportunityId).Credit_Card_Number__c = null;
                opportunityMap.get(getOpportunityId).CC_Expiration_Month_Year__c = null;
				opportunityMap.get(getOpportunityId).Card_Holder_Name__c = null;
                opportunityMap.get(getOpportunityId).TPro_Account_Name__c = null;
				opportunityMap.get(getOpportunityId).ACH_Number__c = null;
				opportunityMap.get(getOpportunityId).Routing_Number__c = null; */
			}
		}

		if (!opportunityMap.isEmpty()) {
			//Update opportunity records.
			update opportunityMap.values();
		}
        
        
        system.debug(accountMap);
        if(!accountMap.isEmpty())
        {
            //update accounts
            update accountMap.values();
        }
	}

	//This method used to get Id from the response
	public static string returnIdfromResponse(DOM.XmlNode xmlIdNode) {
		String responseId;
		for (DOM.XmlNode idnode: xmlIdNode.getChildElements()) {
			if (idnode.getName() == 'id') {
				responseId = idnode.getText();
			}
		}

		return responseId;
	}

	//Wrapper Class used to store response individual node message for each record.
	public class TProResponseWrapper {
		public string customerId;
		public string customerResponseMessage;
		public string contactId;
		public string contactResponseMessage;
		public string storedAccountId;
		public string storedAccountResponseMessage;

	}
    
    
    
}